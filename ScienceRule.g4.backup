grammar ScienceRule;

sciencerule
    : NOT? SP? '(' sciencerule ')'                                                      #parenExp
    | sciencerule SP LOGICAL_OPERATOR SP sciencerule                                      #logicalExp
    | attrPath SP 'pr'                                                        #presentExp
    | lhs=attrPath SP op=( ADD | SUB | MUL | DIV | MOD ) SP rhs=value       #arithmeticExp
    ;

ADD: '+';
SUB: '-';
MUL: '*';
DIV: '/';
MOD: '%';

NOT
    : 'not' | 'NOT'
    ;

LOGICAL_OPERATOR
    : 'and' | 'or'
    ;

BOOLEAN
    : 'true' | 'false'
    ;

NULL
    : 'null'
    ;

attrPath
    : ATTRNAME subAttr?
    ;

subAttr
    : '.' attrPath
    ;

ATTRNAME
    : ALPHA ATTR_NAME_CHAR* ;

fragment ATTR_NAME_CHAR
   : '-' | '_' | ':' | DIGIT | ALPHA
   ;

fragment DIGIT
   : ('0'..'9')
   ;

fragment ALPHA
   : ( 'A'..'Z' | 'a'..'z' )
   ;

value
   : BOOLEAN           #boolean
   | NULL              #null
   | STRING            #string
   | DOUBLE            #double
   | '-'? INT EXP?     #long
   ;

VERSION
   : INT '.' INT '.' INT 
   ;

STRING
   : '"' (ESC | ~ ["\\])* '"'
   ;

listStrings
   : '[' subListOfStrings
   ;

subListOfStrings
   : STRING COMMA subListOfStrings
   | STRING ']';

fragment ESC
   : '\\' (["\\/bfnrt] | UNICODE)
   ;

fragment UNICODE
   : 'u' HEX HEX HEX HEX
   ;

fragment HEX
   : [0-9a-fA-F]
   ;

DOUBLE
   : '-'? INT '.' [0-9] + EXP?
   ;

// INT no leading zeros.
INT
   : '0' | [1-9] [0-9]*
   ;

// EXP we use "\-" since "-" means "range" inside [...]
EXP
   : [Ee] [+\-]? INT
   ;

NEWLINE
   : '\n' ;

COMMA
   : ',' ' '*;

SP
   : ' ' NEWLINE*
   ;